// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package protobuf2map is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Test
	Foo
*/
package protobuf2map

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Things int32

const (
	Things_BEER_CAP Things = 0
	Things_HEAD_CAP Things = 1
	Things_JOKE     Things = 2
)

var Things_name = map[int32]string{
	0: "BEER_CAP",
	1: "HEAD_CAP",
	2: "JOKE",
}
var Things_value = map[string]int32{
	"BEER_CAP": 0,
	"HEAD_CAP": 1,
	"JOKE":     2,
}

func (x Things) String() string {
	return proto.EnumName(Things_name, int32(x))
}
func (Things) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Test struct {
	FieldInt32  int32   `protobuf:"varint,1,opt,name=field_int32,json=fieldInt32" json:"field_int32,omitempty"`
	FieldString string  `protobuf:"bytes,2,opt,name=field_string,json=fieldString" json:"field_string,omitempty"`
	FieldInt64  int64   `protobuf:"varint,3,opt,name=field_int64,json=fieldInt64" json:"field_int64,omitempty"`
	FieldFloat  float32 `protobuf:"fixed32,4,opt,name=field_float,json=fieldFloat" json:"field_float,omitempty"`
	FieldBool   bool    `protobuf:"varint,5,opt,name=field_bool,json=fieldBool" json:"field_bool,omitempty"`
	// unsigned
	FieldUint64 uint64 `protobuf:"varint,6,opt,name=field_uint64,json=fieldUint64" json:"field_uint64,omitempty"`
	// repeated
	FieldInt32S  []int32   `protobuf:"varint,31,rep,packed,name=field_int32s,json=fieldInt32s" json:"field_int32s,omitempty"`
	FieldStrings []string  `protobuf:"bytes,32,rep,name=field_strings,json=fieldStrings" json:"field_strings,omitempty"`
	FieldInt64S  []int64   `protobuf:"varint,33,rep,packed,name=field_int64s,json=fieldInt64s" json:"field_int64s,omitempty"`
	FieldFloats  []float32 `protobuf:"fixed32,34,rep,packed,name=field_floats,json=fieldFloats" json:"field_floats,omitempty"`
	FieldBools   []bool    `protobuf:"varint,35,rep,packed,name=field_bools,json=fieldBools" json:"field_bools,omitempty"`
	// nested
	FieldFoo  *Foo   `protobuf:"bytes,61,opt,name=field_foo,json=fieldFoo" json:"field_foo,omitempty"`
	FieldFoos []*Foo `protobuf:"bytes,62,rep,name=field_foos,json=fieldFoos" json:"field_foos,omitempty"`
	// map
	FieldMapStringInt32 map[string]int32 `protobuf:"bytes,70,rep,name=field_map_string_int32,json=fieldMapStringInt32" json:"field_map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FieldMapInt64_Foo   map[int64]*Foo   `protobuf:"bytes,71,rep,name=field_map_int64_Foo,json=fieldMapInt64Foo" json:"field_map_int64_Foo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FieldEnum           Things           `protobuf:"varint,80,opt,name=field_enum,json=fieldEnum,enum=protobuf2map.Things" json:"field_enum,omitempty"`
}

func (m *Test) Reset()                    { *m = Test{} }
func (m *Test) String() string            { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()               {}
func (*Test) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Test) GetFieldInt32() int32 {
	if m != nil {
		return m.FieldInt32
	}
	return 0
}

func (m *Test) GetFieldString() string {
	if m != nil {
		return m.FieldString
	}
	return ""
}

func (m *Test) GetFieldInt64() int64 {
	if m != nil {
		return m.FieldInt64
	}
	return 0
}

func (m *Test) GetFieldFloat() float32 {
	if m != nil {
		return m.FieldFloat
	}
	return 0
}

func (m *Test) GetFieldBool() bool {
	if m != nil {
		return m.FieldBool
	}
	return false
}

func (m *Test) GetFieldUint64() uint64 {
	if m != nil {
		return m.FieldUint64
	}
	return 0
}

func (m *Test) GetFieldInt32S() []int32 {
	if m != nil {
		return m.FieldInt32S
	}
	return nil
}

func (m *Test) GetFieldStrings() []string {
	if m != nil {
		return m.FieldStrings
	}
	return nil
}

func (m *Test) GetFieldInt64S() []int64 {
	if m != nil {
		return m.FieldInt64S
	}
	return nil
}

func (m *Test) GetFieldFloats() []float32 {
	if m != nil {
		return m.FieldFloats
	}
	return nil
}

func (m *Test) GetFieldBools() []bool {
	if m != nil {
		return m.FieldBools
	}
	return nil
}

func (m *Test) GetFieldFoo() *Foo {
	if m != nil {
		return m.FieldFoo
	}
	return nil
}

func (m *Test) GetFieldFoos() []*Foo {
	if m != nil {
		return m.FieldFoos
	}
	return nil
}

func (m *Test) GetFieldMapStringInt32() map[string]int32 {
	if m != nil {
		return m.FieldMapStringInt32
	}
	return nil
}

func (m *Test) GetFieldMapInt64_Foo() map[int64]*Foo {
	if m != nil {
		return m.FieldMapInt64_Foo
	}
	return nil
}

func (m *Test) GetFieldEnum() Things {
	if m != nil {
		return m.FieldEnum
	}
	return Things_BEER_CAP
}

type Foo struct {
	Foo string `protobuf:"bytes,1,opt,name=foo" json:"foo,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "protobuf2map.Test")
	proto.RegisterType((*Foo)(nil), "protobuf2map.Foo")
	proto.RegisterEnum("protobuf2map.Things", Things_name, Things_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x6d, 0x8b, 0xd3, 0x4e,
	0x10, 0xc0, 0xff, 0xdb, 0x6d, 0x4a, 0x32, 0xd7, 0xbf, 0xc4, 0xbd, 0x53, 0x97, 0x03, 0xb9, 0xbd,
	0xde, 0x0b, 0x17, 0x85, 0x20, 0x6d, 0x29, 0x22, 0x28, 0xdc, 0x69, 0xe2, 0x13, 0xe2, 0x11, 0x9f,
	0x5e, 0xd6, 0x14, 0x13, 0x2d, 0xa6, 0x99, 0xd2, 0x4d, 0x84, 0xfb, 0xd4, 0x7e, 0x05, 0xd9, 0x87,
	0x92, 0xf4, 0xac, 0xbe, 0x6a, 0x77, 0x32, 0xf3, 0xdb, 0xf9, 0xcd, 0x2c, 0x40, 0x9d, 0xab, 0x3a,
	0x5a, 0x6f, 0xb0, 0x46, 0x36, 0x34, 0x3f, 0x8b, 0xa6, 0x18, 0xaf, 0xb2, 0xf5, 0xe8, 0xd7, 0x00,
	0xfa, 0x1f, 0x72, 0x55, 0xb3, 0x13, 0x38, 0x28, 0x96, 0x79, 0xf9, 0x75, 0xbe, 0xac, 0xea, 0xc9,
	0x98, 0x13, 0x41, 0xa4, 0x97, 0x82, 0x09, 0xbd, 0xd2, 0x11, 0x76, 0x0a, 0x43, 0x9b, 0xa0, 0xea,
	0xcd, 0xb2, 0xfa, 0xc6, 0x7b, 0x82, 0xc8, 0x20, 0xb5, 0x45, 0xef, 0x4d, 0x68, 0x87, 0x31, 0x9b,
	0x72, 0x2a, 0x88, 0xa4, 0x2d, 0x63, 0x36, 0x6d, 0x13, 0x8a, 0x12, 0xb3, 0x9a, 0xf7, 0x05, 0x91,
	0x3d, 0x97, 0x90, 0xe8, 0x08, 0xbb, 0x0b, 0xf6, 0x34, 0x5f, 0x20, 0x96, 0xdc, 0x13, 0x44, 0xfa,
	0x69, 0x60, 0x22, 0x17, 0x88, 0x65, 0xdb, 0x43, 0x63, 0x6f, 0x18, 0x08, 0x22, 0xfb, 0xae, 0x87,
	0x8f, 0x26, 0xd4, 0xa6, 0x18, 0x0f, 0xc5, 0x4f, 0x04, 0x95, 0x9e, 0x4b, 0x31, 0x22, 0x8a, 0x9d,
	0xc1, 0xff, 0x5d, 0x13, 0xc5, 0x85, 0xa0, 0x32, 0x48, 0x87, 0x1d, 0x15, 0xb5, 0xc3, 0x99, 0x4d,
	0x15, 0x3f, 0x15, 0x54, 0xd2, 0x96, 0x33, 0x9b, 0x76, 0x52, 0x8c, 0x8d, 0xe2, 0x23, 0x41, 0x65,
	0xcf, 0xa5, 0x18, 0x1d, 0xd5, 0x0a, 0x6b, 0x1f, 0xc5, 0xcf, 0x04, 0x95, 0xbe, 0x13, 0xd6, 0x42,
	0x8a, 0x45, 0x10, 0x38, 0x06, 0x22, 0x7f, 0x22, 0x88, 0x3c, 0x18, 0xdf, 0x8c, 0xba, 0x1b, 0x8a,
	0x12, 0xc4, 0xd4, 0xb7, 0x4c, 0x44, 0xf6, 0x70, 0x3b, 0xa0, 0x02, 0x51, 0xf1, 0xa7, 0x82, 0xee,
	0x2f, 0x08, 0xb6, 0x05, 0x8a, 0x7d, 0x81, 0xdb, 0xb6, 0x62, 0x95, 0xad, 0x9d, 0xb1, 0xdb, 0x71,
	0x62, 0xaa, 0x1f, 0xec, 0x56, 0xeb, 0xc7, 0x10, 0x25, 0xba, 0xe0, 0x6d, 0xb6, 0xb6, 0xc3, 0x30,
	0x63, 0x8b, 0xab, 0x7a, 0x73, 0x95, 0x1e, 0x16, 0x7f, 0x7e, 0x61, 0x9f, 0xe1, 0xb0, 0xbd, 0xc1,
	0x8c, 0x6b, 0x9e, 0x20, 0xf2, 0x17, 0x06, 0x2f, 0xff, 0x81, 0x37, 0x73, 0x4c, 0x10, 0x2d, 0x3b,
	0x2c, 0xae, 0x85, 0xd9, 0x64, 0x2b, 0x9b, 0x57, 0xcd, 0x8a, 0x5f, 0x0a, 0x22, 0x6f, 0x8c, 0x8f,
	0xae, 0xf1, 0xbe, 0xeb, 0x6d, 0x39, 0xdf, 0xb8, 0x6a, 0x56, 0xc7, 0x09, 0xf0, 0xbf, 0xb5, 0xcf,
	0x42, 0xa0, 0x3f, 0xf2, 0x2b, 0xf3, 0xb8, 0x83, 0x54, 0xff, 0x65, 0x47, 0xe0, 0xfd, 0xcc, 0xca,
	0x26, 0x37, 0xcf, 0xd9, 0x4b, 0xed, 0xe1, 0x71, 0xef, 0x11, 0x39, 0xfe, 0x04, 0xb7, 0xf6, 0xf6,
	0xd9, 0x85, 0x50, 0x0b, 0xb9, 0xd7, 0x85, 0xec, 0xdd, 0x47, 0xcb, 0x1d, 0xdd, 0x01, 0xaa, 0xdd,
	0x42, 0xa0, 0x7a, 0xe5, 0xae, 0x95, 0x02, 0xf1, 0x7e, 0x04, 0x03, 0x6b, 0xc3, 0x86, 0xe0, 0x5f,
	0xc4, 0x71, 0x3a, 0x7f, 0x76, 0x7e, 0x19, 0xfe, 0xa7, 0x4f, 0x2f, 0xe3, 0xf3, 0xe7, 0xe6, 0x44,
	0x98, 0x0f, 0xfd, 0xd7, 0xef, 0xde, 0xc4, 0x61, 0x6f, 0x31, 0x30, 0xb7, 0x4c, 0x7e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0xd0, 0x17, 0x31, 0xdd, 0x03, 0x00, 0x00,
}
